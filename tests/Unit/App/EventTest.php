<?php

namespace tests\App;

use App\Event;
use Carbon\Carbon;
use Tests\TestCase;

class EventTest extends TestCase
{
    /**
     * @var Event
     */
    protected $event;

    protected function setUp()
    {
        $this->event = new Event();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown()
    {
        unset($this->event);

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testThatEventModelExists()
    {
        $this->assertTrue(class_exists(Event::class));
    }

    public function testGetAndSetTitle()
    {
        $title = 'Nice title!';

        $this->event->setTitle($title);

        $this->assertEquals($title, $this->event->getTitle());
    }

    public function testGetAndSetDate()
    {
        // create date time using not UTC timezone
        $isoDateTime = Carbon::now()->setTimezone('America/Chicago')->toIso8601String();

        // setDate() converts datetime to UTC timezone before saving
        $this->event->setDate($isoDateTime);

        $this->assertEquals(
            Carbon::parse($isoDateTime)->setTimezone('UTC')->toIso8601String(),
            $this->event->getIsoDate()
        );
    }

    public function testGetAndSetImpact()
    {
        $impact = 123;

        $this->event->setImpact($impact);

        $this->assertEquals($impact, $this->event->getImpact());
    }

    public function testGetAndSetInstriment()
    {
        $instrument = 'direct_instrument ';

        $this->event->setInstrument($instrument);

        $this->assertEquals(trim($instrument), $this->event->getInstrument());
    }

    public function testGetAndSetActual()
    {
        $actual = 123.123123;

        $this->event->setActual($actual);

        $this->assertEquals($actual, $this->event->getActual($actual));
    }

    public function testGetAndSetForecast()
    {
        $forecast = 123.012;

        $this->event->setForecast($forecast);

        $this->assertEquals($forecast, $this->event->getForecast($forecast));
    }
}
